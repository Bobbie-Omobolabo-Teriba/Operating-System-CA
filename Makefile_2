CC      = gcc
FLAGS   = -Wall -Wextra -Wpedantic
SOURCES = $(wildcard *.c) $(wildcard lib/*.c)
OBJECTS = $(patsubst %.c, build/%.o, ${SOURCES})

# Display the colours using cat command
# Pipe the result in a while do loop which loops through each line in colours.txt
# Count number of characters per line using wc command with -c flag
# If the line has 7 or 9 characters print the line - actually 6 or 8 digits the '#' is included
# The backticks ensures that evrything in between them is executed before the main commmand
# Use $$ which represents the line variable
define get_valid
	cat colours.txt | while read line; do if [ `echo -n $$line | wc -c` = 7 ] || [ `echo -n $$line | wc -c` = 9 ] ; then echo $$line ; fi ; done
endef

# This target is the final compile and depends on other targets
link: ${OBJECTS}
	${CC} $^ -o build/convert

# This target compiles just main.cpp (creates an object file)
build/convert.o: convert.c
	${CC} -c ${FLAGS} $< -o $@

# This target compiles just lib/*.o (creates an object files)
build/lib/%.o: lib/%.c
	${CC} -c ${FLAGS} $< -o $@

# Remove all built files, and re-create the bin directory
clean:
	rm -rf ./build && mkdir -p build/lib

# call the get_valid function which will display valid colours
run-task-1:
	@$(call get_valid)

# Pipe ouput of get_valid
#	Loop through each value and print the 4th and 5th character using the head and tail UNIX tools
#	When loop is finished pipe the output to custom program that will convert green hex value to decimal and print the result as comma separated list
run-task-2:
	@$(call get_valid) |  while read line; do printf $$line | head -c 4 | tail -c 1 && printf $$line | head -c 5 | tail -c 1 && printf "\n"; done | ./build/convert

run-task-3:
	@$(call get_valid) | while read line; do printf $$line | cut -c 2- ; done

CC      = gcc
FLAGS   = -Wall -Wextra -Wpedantic
SOURCES = $(wildcard *.c) $(wildcard lib/*.c)
OBJECTS = $(patsubst %.c, build/%.o, ${SOURCES})

# Function that will get the unique paths
# Use cat to display the log file, pipe the output and loop through each line
# Go to the 7th postion in the line  using cut and the -d flag with a space as the delimiter and if the number at this position is greater than 4 then print the line.
# When the loop is completed pipe the output go to the fourth position which is the path and remove duplicates using a combination of sort and uniq
define get_paths
	cat access.log | while read line; do if [ ` echo $$line | cut -d ' ' -f7` -gt 4 ] ; then echo $$line ; fi ; done | cut -d  ' ' -f4 | sort | uniq
endef

# Function to get total requests and redirect to a file
define total_requests
	cat access.log | while read line; do if [ ` echo $$line | cut -d ' ' -f7` -gt 4 ] ; then echo $$line ; fi ; done | cut -d  ' ' -f4 > total.txt
endef

# Function that will count the total number of requests
# Call the total requests function and print message
# Pipe the output of get paths function and while reading each line count occurrances of line in the text file using grep and wc tools
define count_total_requests
	 $(call total_requests) && printf "\nTOTAL NUMBER OF REQUESTS\n" && $(call get_paths) | while read line; do grep -ow $$line total.txt | wc -l ; done
endef

# This target is the final compile and depends on other targets
link: ${OBJECTS}
	${CC} $^ -o build/main

# This target compiles just main.cpp (creates an object file)
build/main.o: main.c
	${CC} -c ${FLAGS} $< -o $@

# This target compiles just lib/*.o (creates an object files)
build/lib/%.o: lib/%.c
	${CC} -c ${FLAGS} $< -o $@

# Remove all built files, and re-create the bin directory
clean:
	rm -rf ./build && mkdir -p build/lib

# Run the solution (FYI: we could make run dependent on link)
# Print last 10 lines of the file
run-task-1:
	@tail -n 10 access.log

# Run second solution in third section - Print unique IP addresses
run-task-2:
	@sort -u -t' ' -k1,1 access.log

#	Run third solution in third section - print only REQUEST portion with error code '404'
run-task-3:
	@grep ' 404 ' access.log | cut -d '"' -f2

#	Run fourth solution in third section
run-task-4:
	@grep 'Windows' access.log > access.ie.log

run-task-5:
	@printf "REQUEST PATH\n" && $(call get_paths) && $(call count_total_requests)
